// qmi8658a_wom.h
#ifndef QMI8658A_WOM_H
#define QMI8658A_WOM_H

#include "driver/i2c.h"
#include "driver/gpio.h"
#include "esp_err.h"

// I2C Configuration for your board
#define I2C_MASTER_SCL_IO           19        // ESP_SCL on your schematic
#define I2C_MASTER_SDA_IO           18        // ESP_SDA on your schematic
#define I2C_MASTER_NUM              I2C_NUM_0
#define I2C_MASTER_FREQ_HZ          400000
#define I2C_MASTER_TX_BUF_DISABLE   0
#define I2C_MASTER_RX_BUF_DISABLE   0

// QMI8658A I2C Address
#define QMI8658A_I2C_ADDR           0x6A      // or 0x6B depending on SA0 pin

// Interrupt pins from your schematic
#define IMU_INT1_GPIO               GPIO_NUM_4  // IMU_INT1 = GPIO4
#define IMU_INT2_GPIO               GPIO_NUM_9  // IMU_INT2 = GPIO9

// QMI8658A Register Addresses
#define REG_WHO_AM_I                0x00
#define REG_REVISION_ID             0x01
#define REG_CTRL1                   0x02
#define REG_CTRL2                   0x03
#define REG_CTRL3                   0x04
#define REG_CTRL5                   0x06
#define REG_CTRL7                   0x08
#define REG_CTRL8                   0x09
#define REG_CTRL9                   0x0A
#define REG_CAL1_L                  0x0B
#define REG_CAL1_H                  0x0C
#define REG_CAL2_L                  0x0D
#define REG_CAL2_H                  0x0E
#define REG_CAL3_L                  0x0F
#define REG_CAL3_H                  0x10
#define REG_CAL4_L                  0x11
#define REG_CAL4_H                  0x12
#define REG_STATUSINT               0x2D
#define REG_STATUS0                 0x2E
#define REG_STATUS1                 0x2F
#define REG_RESET                   0x60

// CTRL9 Commands
#define CTRL_CMD_ACK                0x00
#define CTRL_CMD_WRITE_WOM_SETTING  0x08

// Expected values
#define QMI8658A_WHO_AM_I           0x05
#define QMI8658A_REVISION           0x7C

// WoM Configuration structure
typedef struct {
    uint16_t threshold_mg;      // Motion threshold in milligrams
    uint8_t blanking_samples;   // Number of samples to ignore after trigger
    uint8_t odr_mode;           // Output data rate mode
    gpio_num_t int_pin;         // Which interrupt pin to use (INT1 or INT2)
} qmi8658a_wom_config_t;

// Function prototypes
esp_err_t qmi8658a_i2c_init(void);
esp_err_t qmi8658a_write_register(uint8_t reg, uint8_t data);
esp_err_t qmi8658a_read_register(uint8_t reg, uint8_t *data);
esp_err_t qmi8658a_verify_device(void);
esp_err_t qmi8658a_soft_reset(void);
esp_err_t qmi8658a_configure_wom(const qmi8658a_wom_config_t *config);
esp_err_t qmi8658a_enable_wom_interrupt(gpio_num_t int_pin);
bool qmi8658a_check_wom_event(void);
esp_err_t qmi8658a_exit_wom_mode(void);

#endif // QMI8658A_WOM_H